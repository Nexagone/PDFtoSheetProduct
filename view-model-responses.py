#!/usr/bin/env python3
"""
Script pour visualiser les r√©ponses du mod√®le sauvegard√©es dans le dossier outputs
"""

import json
import os
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List

def load_model_responses(outputs_dir: str = "outputs") -> List[Dict[str, Any]]:
    """Charge toutes les r√©ponses du mod√®le depuis le dossier outputs"""
    responses = []
    outputs_path = Path(outputs_dir)
    
    if not outputs_path.exists():
        print(f"‚ùå Le dossier {outputs_dir} n'existe pas")
        return responses
    
    # Chercher dans tous les sous-dossiers
    for session_dir in outputs_path.iterdir():
        if session_dir.is_dir():
            model_responses_dir = session_dir / "model_responses"
            if model_responses_dir.exists():
                for json_file in model_responses_dir.glob("*.json"):
                    try:
                        with open(json_file, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                            data['file_path'] = str(json_file)
                            responses.append(data)
                    except Exception as e:
                        print(f"‚ö†Ô∏è  Erreur lors du chargement de {json_file}: {e}")
    
    return responses

def display_response_summary(response: Dict[str, Any]) -> None:
    """Affiche un r√©sum√© d'une r√©ponse"""
    metadata = response.get('metadata', {})
    analysis_info = response.get('analysis_info', {})
    
    print(f"üìÑ Session: {metadata.get('session_id', 'N/A')}")
    print(f"üïí Timestamp: {metadata.get('timestamp', 'N/A')}")
    print(f"ü§ñ Mod√®le: {metadata.get('model', 'N/A')}")
    print(f"üìè Longueur prompt: {analysis_info.get('prompt_length', 0)} caract√®res")
    print(f"üìè Longueur r√©ponse: {analysis_info.get('response_length', 0)} caract√®res")
    print(f"üìä Champs extraits: {analysis_info.get('parsed_fields_count', 0)}")
    
    # Afficher les donn√©es extraites principales
    parsed_data = response.get('parsed_data', {})
    if parsed_data:
        print(f"üè∑Ô∏è  Nom produit: {parsed_data.get('product_name', 'N/A')}")
        print(f"üè≠ Marque: {parsed_data.get('brand', 'N/A')}")
        print(f"üìã Description: {parsed_data.get('description', 'N/A')[:100]}...")
    
    print("-" * 50)

def display_detailed_response(response: Dict[str, Any]) -> None:
    """Affiche une r√©ponse d√©taill√©e"""
    print("=" * 80)
    print("üìã R√âPONSE D√âTAILL√âE DU MOD√àLE")
    print("=" * 80)
    
    # M√©tadonn√©es
    metadata = response.get('metadata', {})
    print(f"üìÑ Fichier: {response.get('file_path', 'N/A')}")
    print(f"üïí Session: {metadata.get('session_id', 'N/A')}")
    print(f"üïí Timestamp: {metadata.get('timestamp', 'N/A')}")
    print(f"ü§ñ Mod√®le: {metadata.get('model', 'N/A')}")
    
    # Informations d'analyse
    analysis_info = response.get('analysis_info', {})
    print(f"\nüìä INFORMATIONS D'ANALYSE:")
    print(f"   - Longueur prompt: {analysis_info.get('prompt_length', 0)} caract√®res")
    print(f"   - Longueur r√©ponse: {analysis_info.get('response_length', 0)} caract√®res")
    print(f"   - Champs extraits: {analysis_info.get('parsed_fields_count', 0)}")
    
    # Prompt (tronqu√©)
    prompt = response.get('prompt', '')
    if prompt:
        print(f"\nü§ñ PROMPT (premiers 200 caract√®res):")
        print(f"   {prompt[:200]}...")
    
    # R√©ponse brute (tronqu√©e)
    raw_response = response.get('raw_response', '')
    if raw_response:
        print(f"\nüìù R√âPONSE BRUTE (premiers 300 caract√®res):")
        print(f"   {raw_response[:300]}...")
    
    # Donn√©es pars√©es
    parsed_data = response.get('parsed_data', {})
    if parsed_data:
        print(f"\n‚úÖ DONN√âES EXTRACTES:")
        for key, value in parsed_data.items():
            if value:  # Afficher seulement les champs non vides
                if isinstance(value, dict):
                    print(f"   {key}:")
                    for subkey, subvalue in value.items():
                        if subvalue:
                            print(f"     - {subkey}: {subvalue}")
                elif isinstance(value, list):
                    print(f"   {key}: {', '.join(str(v) for v in value[:3])}")
                    if len(value) > 3:
                        print(f"     ... et {len(value) - 3} autres")
                else:
                    print(f"   {key}: {value}")
    
    print("=" * 80)

def main():
    """Fonction principale"""
    print("üîç VISUALISATEUR DES R√âPONSES DU MOD√àLE")
    print("=" * 50)
    
    # Charger les r√©ponses
    responses = load_model_responses()
    
    if not responses:
        print("‚ùå Aucune r√©ponse du mod√®le trouv√©e")
        print("üí° Assurez-vous d'avoir trait√© au moins un PDF")
        return
    
    print(f"‚úÖ {len(responses)} r√©ponse(s) trouv√©e(s)")
    print()
    
    # Afficher le r√©sum√© de toutes les r√©ponses
    print("üìã R√âSUM√â DES R√âPONSES:")
    print("-" * 50)
    for i, response in enumerate(responses, 1):
        print(f"\n{i}. ", end="")
        display_response_summary(response)
    
    # Demander quelle r√©ponse afficher en d√©tail
    if len(responses) > 1:
        try:
            choice = input(f"\nüîç Entrez le num√©ro de la r√©ponse √† afficher en d√©tail (1-{len(responses)}) ou 'q' pour quitter: ")
            if choice.lower() == 'q':
                return
            
            choice_num = int(choice)
            if 1 <= choice_num <= len(responses):
                display_detailed_response(responses[choice_num - 1])
            else:
                print("‚ùå Num√©ro invalide")
        except ValueError:
            print("‚ùå Entr√©e invalide")
    else:
        # Si une seule r√©ponse, l'afficher directement
        display_detailed_response(responses[0])

if __name__ == "__main__":
    main() 